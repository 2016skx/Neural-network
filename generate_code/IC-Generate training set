import networkx as nx
import logging, os
import operator, collections
import random
import copy

class ltm:
    def __init__(self):
        self.dir_name = "input"

        self.file_name = "rt-twitter-copen.txt"
        self.totalNum = 761
        self.pehaps=0.90
        self.averageNum = 5000
        self.trainNum = 100000
        self.If0=1
        self.activated_node_neighbour = []
        self.edge_to_weight_dict = {}
        self.node_to_incoming_edge_dict = {}
        self.this_node_to_incoming_edge_dict={}
        self.node_to_activation_count_dict = {}
        self.node_to_activated_nodes_set_dict = {}
        self.node_list = {}

        self.top_nodes_with_activation_count = collections.OrderedDict()  # Final data structure which hold the results

    def run_main(self):
        self.open_file()
        self.load_graph()
        self.close_file()
        self.pre_processing()
        self.xunlianji()


    def open_file(self):
        self.fd = open(os.path.join(self.dir_name, self.file_name), 'rb')

    def load_graph(self):
        self.G = nx.read_edgelist(self.fd, create_using=nx.DiGraph())
        self.nodes_list = self.G.nodes()

    def close_file(self):
        self.fd.close()

    def pre_processing(self):
        for i in range(self.totalNum):
            if str(i+self.If0) not in self.nodes_list:
                self.G.add_nodes_from([i+self.If0])
        self.nodes_list= self.G.nodes()
        for node in self.nodes_list:
            if not node:
                continue
            neighbors_list = self.G.neighbors(node)
            # if len(neighbors_list) == 0:
            #     continue
            for neighbor in neighbors_list:
                edge_name = node + "TO" + neighbor
                self.node_to_incoming_edge_dict.setdefault(neighbor, []).append(edge_name)
    def xunlianji(self):
        list1 = []
        for m in range(0, self.trainNum):
            self.this_node_to_incoming_edge_dict=copy.deepcopy(self.node_to_incoming_edge_dict)

            trainInput = [0 for x in range(0, self.totalNum)]
            self.activated_node_set = []
            self.total_activated_nodes_set = []
            seedsetNum = random.randint(2, 15)
            print(seedsetNum)
            self.activated_node_neighbour = []
            for i in range(seedsetNum):
                self.activated_node_set.append(str(random.randint(self.If0, self.totalNum)))  # a <= n <= b
                #self.total_activated_nodes_set.append(str(random.randint(1, self.totalNum)))
                trainInput[int(self.activated_node_set[i]) - self.If0] = 1
            f2 = open('', 'a', encoding='utf-8')

            for num in range(len(trainInput)):
                f2.write(str(trainInput[num]))
                f2.write(' ')
            f2.write('\r')
            f2.close()
            print(self.activated_node_set)
            print(len(self.activated_node_set))
            self.run()

    def run(self):
        tmp = 0
        trainOutput = [0 for x in range(0, self.totalNum)]
        self.total_activated_nodes_set.extend(self.activated_node_set)
        length = len(self.activated_node_set)
        while length != tmp:
            length = len(self.activated_node_set)
            for node in self.activated_node_set:
                neighbors_list = self.G.neighbors(str(node))
                # if len(neighbors_list) == 0:
                #     continue
                for neighbor in neighbors_list:
                    if neighbor not in self.activated_node_set:
                        self.activated_node_neighbour.append(neighbor)
                self.activated_node_neighbour = list(set(self.activated_node_neighbour))
            for node in self.activated_node_neighbour:
                is_activated = self.check_if_is_activated(str(node))
                if is_activated and node not in self.activated_node_set:
                    self.activated_node_set.append(node)
            self.activated_node_set = list(set(self.activated_node_set))
            tmp = len(self.activated_node_set)

        for i in self.activated_node_set:
            trainOutput[int(i)-self.If0] = 1
        f3 = open('', 'a', encoding='utf-8')
        for num in range(len(trainOutput)):
            f3.write(str(trainOutput[num]))
            f3.write(' ')
        f3.write('\r')
        f3.close()
        print(self.activated_node_set)
        print(len(self.activated_node_set))
        # print(self.total_activated_nodes_set)
        # print(len(self.total_activated_nodes_set))

    def check_if_is_activated(self, node):
        incoming_edge_list = self.this_node_to_incoming_edge_dict.get(node)

        if not incoming_edge_list:
            return False
        for edge in incoming_edge_list:
            nodeNum = edge.encode('utf-8').decode('utf-8-sig').split("TO", 2)[0]
            if not node:
                continue
            if nodeNum in self.activated_node_set:
                edge_pro = round(random.uniform(0, 1), 2)
                if edge_pro>=self.pehaps:
                    return True
                else:
                    self.this_node_to_incoming_edge_dict[str(node)].remove(edge)
        return False
if __name__ == "__main__":
    ltm_obj = ltm()
    ltm_obj.run_main()
